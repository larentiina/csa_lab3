in_source: |
  {
      string c = "a";
      input_char(c);
      while(c>0){
          print_char(c);
          input_char(c);
      }
  }
in_stdin: |-
  lera
out_log: |
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.IN: 'IN'>}
  DEBUG    root:machine.py:115 {TICK: 1, PC: 1, ADDR: 0, ACC: 108, DR: 0, DA 0}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.ST: 'ST'>, 'arg': 1, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 2, PC: 1, ADDR: 0, ACC: 108, DR: 1, DA 0}
  DEBUG    root:machine.py:115 {TICK: 3, PC: 2, ADDR: 1, ACC: 108, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 4, PC: 2, ADDR: 1, ACC: 108, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JLE: 'JLE'>, 'arg': 8, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 5, PC: 3, ADDR: 1, ACC: 108, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.LD: 'LD'>, 'arg': 1, 'addr_mode': <AddressMode.DIRECT: 'DIRECT'>}
  DEBUG    root:machine.py:115 {TICK: 6, PC: 3, ADDR: 1, ACC: 108, DR: 108, DA 1}
  DEBUG    root:machine.py:115 {TICK: 7, PC: 4, ADDR: 1, ACC: 108, DR: 108, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.OUT: 'OUT'>}
  DEBUG    root:machine.py:115 {TICK: 8, PC: 5, ADDR: 1, ACC: 108, DR: 108, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.IN: 'IN'>}
  DEBUG    root:machine.py:115 {TICK: 9, PC: 6, ADDR: 1, ACC: 101, DR: 108, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.ST: 'ST'>, 'arg': 1, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 10, PC: 6, ADDR: 1, ACC: 101, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 11, PC: 7, ADDR: 1, ACC: 101, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 12, PC: 7, ADDR: 1, ACC: 101, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JMP: 'JMP'>, 'arg': 2, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 13, PC: 2, ADDR: 1, ACC: 101, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JLE: 'JLE'>, 'arg': 8, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 14, PC: 3, ADDR: 1, ACC: 101, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.LD: 'LD'>, 'arg': 1, 'addr_mode': <AddressMode.DIRECT: 'DIRECT'>}
  DEBUG    root:machine.py:115 {TICK: 15, PC: 3, ADDR: 1, ACC: 101, DR: 101, DA 1}
  DEBUG    root:machine.py:115 {TICK: 16, PC: 4, ADDR: 1, ACC: 101, DR: 101, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.OUT: 'OUT'>}
  DEBUG    root:machine.py:115 {TICK: 17, PC: 5, ADDR: 1, ACC: 101, DR: 101, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.IN: 'IN'>}
  DEBUG    root:machine.py:115 {TICK: 18, PC: 6, ADDR: 1, ACC: 114, DR: 101, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.ST: 'ST'>, 'arg': 1, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 19, PC: 6, ADDR: 1, ACC: 114, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 20, PC: 7, ADDR: 1, ACC: 114, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 21, PC: 7, ADDR: 1, ACC: 114, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JMP: 'JMP'>, 'arg': 2, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 22, PC: 2, ADDR: 1, ACC: 114, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JLE: 'JLE'>, 'arg': 8, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 23, PC: 3, ADDR: 1, ACC: 114, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.LD: 'LD'>, 'arg': 1, 'addr_mode': <AddressMode.DIRECT: 'DIRECT'>}
  DEBUG    root:machine.py:115 {TICK: 24, PC: 3, ADDR: 1, ACC: 114, DR: 114, DA 1}
  DEBUG    root:machine.py:115 {TICK: 25, PC: 4, ADDR: 1, ACC: 114, DR: 114, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.OUT: 'OUT'>}
  DEBUG    root:machine.py:115 {TICK: 26, PC: 5, ADDR: 1, ACC: 114, DR: 114, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.IN: 'IN'>}
  DEBUG    root:machine.py:115 {TICK: 27, PC: 6, ADDR: 1, ACC: 97, DR: 114, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.ST: 'ST'>, 'arg': 1, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 28, PC: 6, ADDR: 1, ACC: 97, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 29, PC: 7, ADDR: 1, ACC: 97, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 30, PC: 7, ADDR: 1, ACC: 97, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JMP: 'JMP'>, 'arg': 2, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 31, PC: 2, ADDR: 1, ACC: 97, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JLE: 'JLE'>, 'arg': 8, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 32, PC: 3, ADDR: 1, ACC: 97, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.LD: 'LD'>, 'arg': 1, 'addr_mode': <AddressMode.DIRECT: 'DIRECT'>}
  DEBUG    root:machine.py:115 {TICK: 33, PC: 3, ADDR: 1, ACC: 97, DR: 97, DA 1}
  DEBUG    root:machine.py:115 {TICK: 34, PC: 4, ADDR: 1, ACC: 97, DR: 97, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.OUT: 'OUT'>}
  DEBUG    root:machine.py:115 {TICK: 35, PC: 5, ADDR: 1, ACC: 97, DR: 97, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.IN: 'IN'>}
  DEBUG    root:machine.py:115 {TICK: 36, PC: 6, ADDR: 1, ACC: 0, DR: 97, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.ST: 'ST'>, 'arg': 1, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 37, PC: 6, ADDR: 1, ACC: 0, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 38, PC: 7, ADDR: 1, ACC: 0, DR: 1, DA 1}
  DEBUG    root:machine.py:115 {TICK: 39, PC: 7, ADDR: 1, ACC: 0, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JMP: 'JMP'>, 'arg': 2, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 40, PC: 2, ADDR: 1, ACC: 0, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.JLE: 'JLE'>, 'arg': 8, 'addr_mode': <AddressMode.IMMEDIATE: 'IMMEDIATE'>}
  DEBUG    root:machine.py:115 {TICK: 41, PC: 8, ADDR: 1, ACC: 0, DR: 1, DA 1}
  INFO     root:machine.py:148 instruction: {'opcode': <Opcode.HLT: 'HLT'>}
out_stdout: |
  ============================================================
  lera
  instr_counter:  27 ticks: 41
out_code: |
  [
      {
          "opcode": "IN"
      },
      {
          "opcode": "ST",
          "arg": 1,
          "addr_mode": "IMMEDIATE"
      },
      {
          "opcode": "JLE",
          "arg": 8,
          "addr_mode": "IMMEDIATE"
      },
      {
          "opcode": "LD",
          "arg": 1,
          "addr_mode": "DIRECT"
      },
      {
          "opcode": "OUT"
      },
      {
          "opcode": "IN"
      },
      {
          "opcode": "ST",
          "arg": 1,
          "addr_mode": "IMMEDIATE"
      },
      {
          "opcode": "JMP",
          "arg": 2,
          "addr_mode": "IMMEDIATE"
      },
      {
          "opcode": "HLT"
      }
  ]
out_ast: |
  Node(type=PROG, value="None")
    Node(type=SEQ, value="None")
      Node(type=SEQ, value="None")
        Node(type=SEQ, value="None")
          Node(type=EMPTY, value="None")
          Node(type=OPERATOR, value="=")
            Node(type=VAR_STRING, value="c")
            Node(type=STRING_CONST, value="a")
        Node(type=FUNC, value="input_char")
          Node(type=VAR, value="c")
      Node(type=KEY_WORDS, value="while")
        Node(type=OPERATOR, value=">")
          Node(type=VAR, value="c")
          Node(type=INT_CONST, value="0")
        Node(type=SEQ, value="None")
          Node(type=SEQ, value="None")
            Node(type=EMPTY, value="None")
            Node(type=FUNC, value="print_char")
              Node(type=VAR, value="c")
          Node(type=FUNC, value="input_char")
            Node(type=VAR, value="c")
